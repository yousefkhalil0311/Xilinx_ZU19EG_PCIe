/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xparameters.h"
#include "xspi.h"
#include "xuartps.h"

#include "RegisterMaps.h"

#define SPI0_CLK_ID 	XPAR_SPI_0_DEVICE_ID

//SPI bus XSpi instances
XSpi SPI0_CLK;

uint8_t _8V19N882_CONFIG_SPI_FORMAT[] = {0x00 << 1, 0x00 << 1, 0x24, 0x00};
	  //Use this for og setup. uint8_t _8V19N882_CONFIG_PARAMS_MAP_0x02[] = {0x00 << 1, 0x02 << 1, 0x00, 0x06, 0x48, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x04, 0xc0, 0x00, 0x00, 0x2f, 0x40, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x0a, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x03, 0x42, 0x00, 0x47, 0x00, 0x42, 0x00, 0x42, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x42, 0x00, 0x42, 0x00, 0x47, 0x00, 0x02, 0x00, 0x02, 0x00, 0x47, 0x00, 0x47, 0x00, 0x42, 0x00, 0x42, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	  uint8_t _8V19N882_CONFIG_PARAMS_MAP_0x02[] = {0x00 << 1, 0x02 << 1,
			  0x00, 0x06, 0x48, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x04, 0x00, 0x00,
			  0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x04, 0xc0, 0x00, 0x00, 0x2f, 0x40, 0x00, 0x00,
			  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
			  0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00,
			  0x13, 0x00, 0x00, 0x03, 0x4b, 0x00, 0x00, 0x03, 0x0b, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
			  0x0b, 0x00, 0x00, 0x03, 0x4b, 0x00, 0x00, 0x03, 0x0b, 0x00, 0x00, 0x02, 0x00 /*D6:3 N1, D2:0 N2*/, 0x00, 0x00, 0x03,
			  0x42, 0x00, 0x47, 0x00, 0x42, 0x00, 0x42, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00,
			  0x42, 0x00, 0x42, 0x00, 0x47, 0x00, 0x02, 0x00, 0x02, 0x00, 0x47, 0x00, 0x47, 0x00, 0x42, 0x00,
			  0x42, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	  uint8_t _8V19N882_CONFIG_PARAMS_MAP_0x91[] = {((0x0091 << 1) >> 8) & 0xFF, (0x0091 << 1) & 0xFF, 0xab, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}; //0x90 is the LS_ flags so skip it

	  uint8_t _8V19N882_SET_INIT_CLK[] = {((0x0099 << 1) >> 8) & 0xFF, (0x0099 << 1) & 0xFF, 0x80};//INIT_CLK

	  uint8_t _8V19N882_RESET_RELOCK[] = {((0x0098 << 1) >> 8) & 0xFF, (0x0098 << 1) & 0xFF, 0x00};//RELOCK

	  uint8_t _8V19N882_RESET_FCVO[] = {((0x001D << 1) >> 8) & 0xFF, (0x001D << 1) & 0xFF, 0x00};//Reset FCVO bit to 0

	  uint8_t _8V19N882_CLEAR_STATUS_FLAGS[] = {((0x0090 << 1) >> 8) & 0xFF, (0x0090 << 1) & 0xFF, 0xFF};//CLEAR STATUS FLAGS

	  uint8_t _8V19N882_ENABLE_OUTPUTS[] = {((0x009C << 1) >> 8) & 0xFF, (0x009C << 1) & 0xFF, 0x0d, 0x9b, 0x01};//output enable regs


int SPI_Init (XSpi *instance, uint16_t bus_id){

	int Status;
    XSpi_Config *ConfigPtr;

    ConfigPtr = XSpi_LookupConfig(bus_id);
    if (ConfigPtr == NULL){
    	return XST_DEVICE_NOT_FOUND;
    }

    Status = XSpi_CfgInitialize(instance, ConfigPtr, ConfigPtr->BaseAddress);
    if (Status != XST_SUCCESS){
    	return XST_FAILURE;
    }

    Status = XSpi_SetOptions(instance, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);
    if (Status != XST_SUCCESS){
    	return XST_FAILURE;
    }

    XSpi_Start(instance);
    XSpi_IntrGlobalDisable(instance);

    //SPI1_LSDAC initialized. Usage:
    //Set CS pin: 	XSpi_SetSlaveSelect(Instance, cs pin)
    //Transfer data:XSpi_Transfer(Instance, Tx_Data_buffer, Rx_Data_buffer, Buffer size in bytes)
    //Transfer function return XST_SUCCESS and XST_FAILURE

    return XST_SUCCESS;
}



int CLK_Init (XSpi *instance, uint32_t CS){

	int Status;
	XSpi_SetSlaveSelect(instance, CS);

	uint8_t Rx_buffer[300];

	Status = XSpi_Transfer(instance, _8V19N882_CONFIG_SPI_FORMAT, Rx_buffer, sizeof(_8V19N882_CONFIG_SPI_FORMAT));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_CONFIG_PARAMS_MAP_0x02, Rx_buffer, sizeof(_8V19N882_CONFIG_PARAMS_MAP_0x02));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_CONFIG_PARAMS_MAP_0x91, Rx_buffer, sizeof(_8V19N882_CONFIG_PARAMS_MAP_0x91));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_SET_INIT_CLK, Rx_buffer, sizeof(_8V19N882_SET_INIT_CLK));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_RESET_RELOCK, Rx_buffer, sizeof(_8V19N882_RESET_RELOCK));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_RESET_FCVO, Rx_buffer, sizeof(_8V19N882_RESET_FCVO));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_CLEAR_STATUS_FLAGS, Rx_buffer, sizeof(_8V19N882_CLEAR_STATUS_FLAGS));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	Status = XSpi_Transfer(instance, _8V19N882_ENABLE_OUTPUTS, Rx_buffer, sizeof(_8V19N882_ENABLE_OUTPUTS));
	if (Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Successfully ran Hello World application");

    // Initialize AFE7222 SPI device
    printf("Boot: Initializing AFE7222 SPI device...\n");
    int Status = SPI_Init(&SPI0_CLK, SPI0_CLK_ID);
    if(Status != XST_SUCCESS) return XST_FAILURE;

	Status = CLK_Init(&SPI0_CLK, 1);
	if(Status != XST_SUCCESS) return XST_FAILURE;



    cleanup_platform();
    return 0;
}
